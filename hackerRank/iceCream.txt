Two friends like to pool their money and go to the ice cream parlor. They always choose two distinct flavors and they spend all of their money.
Given a list of prices for the flavors of ice cream, select the two that will cost all of the money they have.

Example. m=6 cost=[1,3,4,5,6]

The two flavors that cost 1 and 5 meet the criteria. Using 1-based indexing, they are at indices  1 and 4.

Function Description

Complete the icecreamParlor function in the editor below.

icecreamParlor has the following parameter(s):
int m: the amount of money they have to spend
int cost[n]: the cost of each flavor of ice cream

Returns
int[2]: the indices of the prices of the two flavors they buy, sorted ascending

https://www.youtube.com/watch?v=PtFAJTCKNn8&list=PLSIpQf0NbcCltzNFrOJkQ4J4AAjW3TSmA

public static List<Integer> icecreamParlor(int m, List<Integer> arr) {
    // Optimised with Hashmap
    List<Integer> answer = new ArrayList<>();
    int size = arr.size();
    HashMap<Integer, Integer> map = new HashMap<>();
    for(int i =0; i<size;i++){
        int y = m - arr.get(i);
        if(map.get(y) != null){
            int j = map.get(y) + 1;
            answer.add(j);
            answer.add(i+1);
            break;
        }
        map.put(arr.get(i), i);
    }
    return answer;
    

    /* brute force 
    boolean found = false;
    for(int i =0; i<size;i++){
        for(int j =i+1; j<size;j++){
            int a = arr.get(i);
            int b = arr.get(j);
            int tot = a + b;
            System.out.println("Arr["+i+"]: "+ arr.get(i) + "->a " + a + "b " + b + "tot " + tot);
            if(tot == m){
                System.out.println("Answer found "+ (i+1) + (j+1));
                answer.add(i+1);
                answer.add(j+1);
                found = true;
                break;
            }
        }
        if(found){
            break;
        }
    }
    return answer;
    */
    }
}

// approach2 - using array
	static int[] icecreamParlorA2(int m, int[] arr) {
		int result[] = new int[2];
		int n = arr.length;
		int frequency[] = new int[10001];

		Arrays.fill(frequency, -1);

		for (int i = 0; i < n; i++) {
			int x = arr[i];
			int y = m - x;

			if (y >= 0) {

				int j = frequency[y];

				if (j != -1) {
					result[0] = j + 1;
					result[1] = i + 1;
					break;
				}
			}

			frequency[x] = i;
		}

		return result;

	}